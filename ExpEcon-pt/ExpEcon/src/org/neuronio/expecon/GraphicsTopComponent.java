/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuronio.expecon;

import control.AccountController;
import control.ChartController;
import control.ShareController;
import java.awt.GridLayout;
import javax.swing.JTable;
import model.Account;
import model.Share;
import model.StockData;
import model.Time;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties; 
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import view.AccountView;
import view.TimeView;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.neuronio.expecon//Graphics//EN",
autostore = false)
@TopComponent.Description(preferredID = "GraphicsTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.neuronio.expecon.GraphicsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_GraphicsAction",
preferredID = "GraphicsTopComponent")
public final class GraphicsTopComponent extends TopComponent {
    private StockData modelAccount;
    private StockData modelShare;
    private StockData modelTime;
    private JTable tableAccount;
    private JTable tableShare;
    private JTable tableTime; 
    private String modelAcountPath;
    private String modelSharePath;
    private String modelTimePath;
    
    private Account account;     
    private Share share;
    private Time time;
      
     
    
    public void setTime(Time time) {
        this.time = time;
    }
  
    public void setAccount(Account account) {
        this.account = account;
    }

    public void setShare(Share share) {
        this.share = share;
    }
 
    public Share getShare() {
        return share;
    }

    public Account getAccount() {
        return account;
    }

    public Time getTime() {
        return time;
    }
    public GraphicsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(GraphicsTopComponent.class, "CTL_GraphicsTopComponent"));
        setToolTipText(NbBundle.getMessage(GraphicsTopComponent.class, "HINT_GraphicsTopComponent"));

          modelSharePath = NbBundle.getMessage(GraphicsTopComponent.class, "share.path");
        this.modelShare = new StockData(modelSharePath);        
        this.tableShare = new JTable();
        this.tableShare.setModel(modelShare);
         
        modelTimePath = NbBundle.getMessage(GraphicsTopComponent.class, "time.path"); 
        this.modelTime = new StockData(modelTimePath);       
        this.tableTime = new JTable();
        this.tableTime.setModel(modelTime);
        this.tableTime.createDefaultColumnsFromModel();
        
        modelAcountPath = NbBundle.getMessage(GraphicsTopComponent.class, "account.path");   
        this.modelAccount = new StockData(modelAcountPath);
        this.tableAccount = new JTable();
        this.tableAccount.setModel(modelAccount);
        this.tableAccount.createDefaultColumnsFromModel();
        
        this.account = new Account( tableAccount );     
        this.share = new Share( tableShare );
        this.time = new Time( tableTime );
        setAccount(account);
        setShare(share);
        setTime(time);  
        
        ShareController  jpShareView1 = new ShareController(account, share, time);
        jpShareView.setLayout(new GridLayout(0, 1) );
        jpShareView.add(jpShareView1);
        
//        TopComponent win = new BankTopComponent();
//        win.open();
//        win.requestActive(); 
         AccountController jpBank1 = new AccountController( account, share, time );
//        win.setLayout(new GridLayout(0, 1) );
//        win.add(jpBank1);
         jpBank.setLayout(new GridLayout(0, 1) );
        jpBank.add(jpBank1);
        
        AccountView jpAccountView1 = new AccountView( account , share);
        jpAccountView.setLayout(new GridLayout(0, 1) );
        jpAccountView.add(jpAccountView1);
        
        TimeView jpTimePolicy1 = new TimeView( time );
        jpTimePolicy.setLayout(new GridLayout(0, 1) );
        jpTimePolicy.add(jpTimePolicy1);
        
       ChartController jpGraphics1 = new ChartController( share,account,time);
       jpGraphics.setLayout(new GridLayout(0, 1) );
        jpGraphics.add(jpGraphics1);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpGraphics = new javax.swing.JPanel();
        jpAccountView = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpShareView = new javax.swing.JPanel();
        jpBank = new javax.swing.JPanel();
        jpTimePolicy = new javax.swing.JPanel();

        setLayout(new java.awt.GridLayout(1, 2));

        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        javax.swing.GroupLayout jpGraphicsLayout = new javax.swing.GroupLayout(jpGraphics);
        jpGraphics.setLayout(jpGraphicsLayout);
        jpGraphicsLayout.setHorizontalGroup(
            jpGraphicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jpGraphicsLayout.setVerticalGroup(
            jpGraphicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 334, Short.MAX_VALUE)
        );

        jPanel1.add(jpGraphics);

        javax.swing.GroupLayout jpAccountViewLayout = new javax.swing.GroupLayout(jpAccountView);
        jpAccountView.setLayout(jpAccountViewLayout);
        jpAccountViewLayout.setHorizontalGroup(
            jpAccountViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jpAccountViewLayout.setVerticalGroup(
            jpAccountViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 334, Short.MAX_VALUE)
        );

        jPanel1.add(jpAccountView);

        add(jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(3, 0));

        jpShareView.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jpShareViewLayout = new javax.swing.GroupLayout(jpShareView);
        jpShareView.setLayout(jpShareViewLayout);
        jpShareViewLayout.setHorizontalGroup(
            jpShareViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jpShareViewLayout.setVerticalGroup(
            jpShareViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );

        jPanel2.add(jpShareView);

        javax.swing.GroupLayout jpBankLayout = new javax.swing.GroupLayout(jpBank);
        jpBank.setLayout(jpBankLayout);
        jpBankLayout.setHorizontalGroup(
            jpBankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jpBankLayout.setVerticalGroup(
            jpBankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );

        jPanel2.add(jpBank);

        javax.swing.GroupLayout jpTimePolicyLayout = new javax.swing.GroupLayout(jpTimePolicy);
        jpTimePolicy.setLayout(jpTimePolicyLayout);
        jpTimePolicyLayout.setHorizontalGroup(
            jpTimePolicyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jpTimePolicyLayout.setVerticalGroup(
            jpTimePolicyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );

        jPanel2.add(jpTimePolicy);

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jpAccountView;
    private javax.swing.JPanel jpBank;
    private javax.swing.JPanel jpGraphics;
    private javax.swing.JPanel jpShareView;
    private javax.swing.JPanel jpTimePolicy;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
